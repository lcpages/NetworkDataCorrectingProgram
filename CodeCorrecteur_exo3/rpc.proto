syntax = "proto3";

package communication;

///////////////////////////////////////////////////////////////////////////////
// Nouvelles fonctions de communication à implémenter
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Service de test de connection
///////////////////////////////////////////////////////////////////////////////

service Hello {
  // Fonction servant juste au test de connection
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

message HelloRequest {
    string Name = 1;
}
message HelloReply {
    string Name = 1;
}

///////////////////////////////////////////////////////////////////////////////
// Service de gestion des NPC
///////////////////////////////////////////////////////////////////////////////

service Interactions {
  // Fonction transmettant un click du client au serveur
  rpc RightClick (RightClickRequest) returns (RightClickReply) {}

  // Fonction permettant au client de demander les mises à jour
  rpc AskUpdate (AskUpdateRequest) returns (AskUpdateReply) {}

}

// Messages liés à RightClick
/* * Demande du Client : Demande le déplacement de une ou plusieurs unités
* Argument donné par Client :

    ** Point : Variable de type coordonnée servant de destination.
    ** EntitySelectionUUID : Tableau des identifiants concerné par la requête.
    ** Target : Chaine de caractère représentant l'entité qui doit être attaquer.
    Cela peut être :
        *** Un identifiant de NPC
        *** Un identifiant de batiment
        *** Un identifiant de ressource
*/
message RightClickRequest {
    Coordinates Point = 1;
    repeated string EntitySelectionUUID = 2;
    string Target = 3;
}
/* * Reponse du Serveur : Un message vide
* Argument donné par Serveur :  Aucun, pas d'information dans le message */
message RightClickReply {}
/* * X : Entier de 32 bits donnant la composante x de la coordonnée sur le carte
* Y : Entier de 32 bits donnant la composante y de la coordonnée sur le carte */
message Coordinates {
    float X = 1;
    float Y = 2;
  }

// Message liés à AskUpdate
/* * Demande du Client : Demande les actions qui ont été signaler au serveur pour mettre à jour le client.
* Argument donné par Client :
    ** Token : Suite de caractère permettant d'identifier et authentifier le client au près du serveur */
message AskUpdateRequest {
    string Token = 1;
}
/* * Reponse du Serveur : Message contenant un tableau des actions * signaler au serveur
* Argument donné par Serveur :
    ** Array : Tableau contenant les actions entreprissent depuis la dernière mise à jour
        ** Type : Type de l'action décrite dans la suite du message (entier)
        ** EntityUUID : Entité designé par l'action décrite (string)
        ** Arg : Tableau d'argument variable lié au type d'action
            ** Key : Nom de la valeur (string)
            ** Value : Valeur lié à la clé (string) */
message AskUpdateReply {
    // Si vide rien
    repeated UpdateAsked Array = 1;
}

/*
* 0 : Création d'un NPC
    ** EntityUUID : Identifiant de l'entité créé
    ** Arg :
        *** Key :
            - "pv" -> Point de vie
            - "x" -> Coordonnée x
            - "y" -> Coordonnée y
            - "px" -> float64 coordonnée X
            - "py" -> float64 coordonnée y
            - "vitesse" -> Vitesse de déplacement
            - "type" -> Type de NPC (0:villager | 1:harvester | 2:soldier)
            - "damage" -> Dégats qu'inflige le NPC
            - "vue" -> Distance de vue du NPC
            - "portee" -> Distance de la portée d'attaque
            - "PlayerUUID" -> UUID du joueur propriétaire
        *** Value : Valeur en fonction de la donnée
        
* 1 : Destruction d'un NPC
    ** EntityUUID : Identifiant de l'entité concernée
    ** Arg : Vide/A ne pas prendre en compte

* 2 : Modification d'un NPC
    ** EntityUUID : Identifiant de l'entité concerné
    ** Arg :
        *** Key :
            - "pv" -> Point de vie
            - "x" -> Coordonnée x float64
            - "y" -> Coordonnée y float64
            - "destX" -> Destination coordonnée x (-1 si pas de chemin) float64
            - "destY" -> Destination coordonnée y (-1 si pas de chemin) float64
            - "vitesse" -> Vitesse de déplacement
            - "type" ->Type du NPC (0:villager | 1:harvester | 2:soldier)
            - "damage" -> Dégats prit par le NPC
            - "vue" -> Distance de vue du NPC
            - "portee" -> Distance de la portée d'attaque
        *** Value : Valeur en fonction de la donnée
        
* 3 : Mise à jour des ressource d'un joueur
    ** EntityUUID : Identifiant du joueur concerné
    ** Arg :
        *** Key :
            - "nom" -> nom du joueur
            - "faction" -> équipe (int) du joueur
            - "uid" -> UUID du joueur
            - "stone" -> nombre de la ressource possédée
            - "wood" -> idem
            - "food" -> idem
        *** Value : -

* 4 : Endommagement d'une ressource
    ** EntityUUID : Coordonnée de la ressource concerné
    ** Arg :
        *** Key :
            - "x" -> Coordonnée X
            - "y" -> Coordonnée Y
            - "pv" -> Nouveau PV
            - "type" -> type de la ressource
            - "id" -> id de laressource
        *** Value : Valeur en fonction de la donnée

* 5 : Destruction d'une ressource
    ** EntityUUID : Coordonnée de la ressource concerné
    ** Arg :
        *** Key :
            - "x" -> Coordonnée X
            - "y" -> Coordonnée Y
            - "id" -> id de la ressource
        *** Value : Valeur en fonction de la donnée

* 6 : Création d'une ressource
    ** EntityUUID : id de la ressource concerné
    ** Arg :
        *** Key :
            - "x" -> Coordonnée X
            - "y" -> Coordonnée Y
            - "pv" -> PV
            - "type" -> "0"->Eau | "1"->Bois | "2"->Pierre | "3"->Nourriture
            - "id" -> ID
        *** Value : Valeur en fonction de la donnée
    
* 7 : Endommagement d'un bâtiment
    ** EntityUUID : Identifiant du bâtiment concerné
    ** Arg :
        *** Key :
            - "pv" -> Nouveau PV
            - "id" -> id batiment
            - "PlayerUUID" -> id joueur propriétaire
        *** Value : Valeur en fonction de la donnée

* 8 : Destruction d'un bâtiment
    ** EntityUUID : Identifiant du bâtiment concerné
    ** Arg : Vide

* 9 : Création d'un bâtiment
    ** EntityUUID : Identifiant du bâtiment concerné
    ** Arg :
        *** Key :
            - "x" -> Coordonnée X
            - "y" -> Coordonnée Y
            - "pv" -> PV
            - "type" -> Type
            - "PlayerUUID" -> PlayerUUID
            - "id" -> id batiment
        *** Value : Valeur en fonction de la donnée
    
* 10 : Fin du jeu
    ** EntityUUID : Vide
    ** Arg : Vide
*/
message UpdateAsked {
    int32 Type = 1;
    string EntityUUID = 2;
    repeated Param Arg = 3;
}

message Param {
    string Key = 1;
    string Value = 2;
}
